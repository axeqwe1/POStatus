// lib/signalr-client.ts
import {
  HubConnectionBuilder,
  HubConnection,
  HubConnectionState,
  LogLevel,
} from "@microsoft/signalr";

const createSignalRConnection = async (): Promise<HubConnection> => {
  const connection = new HubConnectionBuilder()
    .withUrl("https://localhost:7004/hub/notification")
    .withAutomaticReconnect({
      nextRetryDelayInMilliseconds: (retryContext) => {
        console.warn(
          `üîÅ Retry attempt #${retryContext.previousRetryCount + 1}`
        );
        return 2000; // 2 seconds between retries
      },
    })
    .configureLogging(LogLevel.Information)
    .build();

  // üö® ‡∏ñ‡πâ‡∏≤ disconnect
  connection.onclose((error) => {
    console.warn("‚ùå SignalR disconnected", error);
  });

  // üîÅ ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° reconnect
  connection.onreconnecting((error) => {
    console.warn("üü° Reconnecting...", error?.message);
  });

  // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠ reconnect ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  connection.onreconnected((connectionId) => {
    console.log("‚úÖ Reconnected to SignalR", connectionId);
  });

  // üü¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  try {
    await connection.start();
    console.log("üü¢ SignalR connected");
  } catch (err) {
    console.error("‚ùå SignalR failed to connect:", err);
  }

  return connection;
};

export default createSignalRConnection;
